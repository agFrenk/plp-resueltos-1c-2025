
* Guia 0
** funciones utiles
#+BEGIN_SRC emacs-lisp
  (load-file "../funcionesUtiles.el")

#+END_SRC
** Ejercicio 1
Dar el tipo y describir el comportamiento de las siguientes funciones del módulo Prelude de Haskell:

null head tail init last take drop (++) concat reverse elem
null)
#+BEGIN_SRC haskell :results output
  main = print (:t null)
#+END_SRC

*RESULTS:*
: <interactive>:3:16: error:
:     Variable not in scope: t :: (t0 a0 -> Bool) -> [a1]
head)
#+BEGIN_SRC haskell :results output
  print (:t head)
#+END_SRC

*RESULTS:*
: <interactive>:3:9: error:
:     Variable not in scope: t :: ([a0] -> a0) -> [a1]
** Ejercicio 2
Definir las siguientes funciones:
a. valorAbsoluto :: Float → Float, que dado un número devuelve su valor absoluto.

#+BEGIN_SRC haskell :results output
   -- Función valorAbsoluto: devuelve el valor absoluto de un número.
   valorAbsoluto :: a -> a
   valorAbsoluto x = if x >= 0 then x else -x
   valorAbsoluto (-7)
#+END_SRC

*RESULTS:*
: 7

b. bisiesto :: Int → Bool, que dado un número que representa un año, indica si el mismo es bisiesto.
#+BEGIN_SRC haskell :results output
  -- Función bisiesto: determina si un año es bisiesto.
  esSecular :: Int -> Bool
  esSecular x = if mod x 100 == 0 then (if mod x 400 == 0 then True else False) else True

  bisiesto :: Int -> Bool
  bisiesto x = if mod x 4 == 0 then (esSecular x) else False   -- Reemplaza 'undefined' con tu implementación

  bisiesto 2020
  bisiesto 200
  bisiesto 300
  bisiesto 400
#+END_SRC

*RESULTS:*
: True
: False
: False
: True

c. factorial :: Int → Int, definida únicamente para enteros positivos, que computa el factorial.
#+BEGIN_SRC haskell :results output
    -- Función factorial: computa el factorial de un entero positivo.
    :{
    factorial :: Int -> Int
    factorial 1 = 1
    factorial x = x * factorial (x-1)
    :}
    factorial 2
    factorial 3
#+END_SRC

*RESULTS:*
: 2
: 6
d. cantDivisoresPrimos :: Int → Int, que dado un entero positivo devuelve la cantidad de divisores primos.
#+BEGIN_SRC haskell :results output code
  -- Función cantDivisoresPrimos: cuenta la cantidad de divisores primos de un entero positivo.
  :{

  cantDivisoresPrimos :: Int -> Int
  cantDivisoresPrimos x = iterarDivisores x x

  iterarDivisores:: Int -> Int -> Int
  iterarDivisores _ 1 = 0
  iterarDivisores x 2 = if mod x 2 == 0 then 1 else 0
  iterarDivisores x y = if mod x y == 0 && (esPrimo y) then (iterarDivisores x (y-1)) + 1 else (iterarDivisores x (y-1))

  esPrimo :: Int -> Bool
  esPrimo x = if x < 2 then False else esPrimoRecursivo x (x - 1)

  esPrimoRecursivo:: Int -> Int -> Bool
  esPrimoRecursivo _ 1 = True
  esPrimoRecursivo x y = if (mod x y == 0) then False else esPrimoRecursivo x (y-1)

  :}
  cantDivisoresPrimos 4141
  cantDivisoresPrimos 100
  cantDivisoresPrimos 42
  cantDivisoresPrimos 7

#+END_SRC

*RESULTS:*
#+begin_src haskell
2
2
3
1
#+end_src
** Ejercicio 3
Contamos con los tipos *Maybe* y *Either* definidos como sigue:
#+BEGIN_SRC haskell :results output code
    :{
      data Maybe a = Nothing | Just a
      data Either a b = Left a | Right b
    :}
#+END_SRC
a. Definir la función inverso :: Float → Maybe Float que dado un número devuelve su inverso multiplicativo
si está definido, o Nothing en caso contrario.

#+BEGIN_SRC haskell :results output
  :{
   data Maybe a = Nothing | Just a deriving (Show)
   data Either a b = Left a | Right b deriving (Show)

   inverso:: Float -> Maybe Float
   inverso 0 = Nothing
   inverso x = Just (1/x)
  :}

  inverso 0
  inverso 8
#+END_SRC

*RESULTS:*
: Nothing
: Just 0.125

b. Definir la función aEntero :: Either Int Bool → Int que convierte a entero una expresión que puede ser
booleana o entera. En el caso de los booleanos, el entero que
corresponde es 0 para False y 1 para True.
#+BEGIN_SRC haskell :results output
  :{
   data Maybe a = Nothing | Just a deriving (Show)
   data Either a b = Left a | Right b deriving (Show)

   aEntero:: Either Int Bool -> Int
   aEntero (Right True) = 1
   aEntero (Right False) = 0
   aEntero (Left x) = x
  :}

  aEntero (Left 8)
  aEntero (Right True)
  aEntero (Right False)
#+END_SRC

*RESULTS:*
: 8
: 1
: 0
