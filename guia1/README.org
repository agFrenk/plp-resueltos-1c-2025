* Guia 1
** funciones utiles
#+BEGIN_SRC emacs-lisp
      (defun replace-results-line ()
        "Reemplaza '*RESULTS:*' por '*RESULTS:*' en el buffer actual."
        (interactive)
        (save-excursion
          (goto-char (point-min))
          (while (search-forward "*RESULTS:*" nil t)
            (replace-match "*RESULTS:*" nil nil))))

      (defun my-org-block-strip-leading-whitespace ()
      "Elimina espacios y tabulaciones al inicio de cada línea en el bloque Org actual.
    Se busca el bloque Org en el que está el cursor y, si se encuentra, se eliminan
    todos los espacios y tabulaciones que preceden a cualquier otro carácter en cada línea."
      (interactive)
      (let* ((element (org-element-at-point))
             (beg (org-element-property :begin element))
             (end (org-element-property :end element)))
        (if (and beg end)
            (save-excursion
              (goto-char beg)
              (while (re-search-forward "^[ \t]+" end t)
                (replace-match "")))
          (message "No se encontró un bloque Org en el punto."))))
    (defun my-org-block-hindent-indent ()
    "Llama a `my-org-block-strip-leading-whitespace`, activa `hindent-mode` y luego,
  para cada línea del bloque Org actual, simula la pulsación de TAB con `indent-for-tab-command`."
    (interactive)
    ;; Primero elimina los espacios y tabs al inicio de cada línea en el bloque.
    (my-org-block-strip-leading-whitespace)
    ;; Activa hindent-mode.
    (hindent-mode 1)
    (let* ((element (org-element-at-point))
           (beg (org-element-property :begin element))
           (end (org-element-property :end element)))
      (if (and beg end)
          (save-excursion
            (goto-char beg)
            (while (< (point) end)
              (indent-for-tab-command)
              (forward-line 1)))
        (message "No se encontró un bloque Org en el punto."))))




#+END_SRC

*RESULTS:*
: my-org-block-hindent-indent

*RESULTS:*
: my-org-block-hindent-indent

** Ejericio1


Considerar las siguientes definiciones de funciones:
1) Cuál es el tipo de cada función? (Suponer que todos los números son de tipo Float).

El tipo esta especificado dentro de cada funcion
max2 (x, y)
#+BEGIN_SRC haskell :results output
  :{
  max2:: (Float, Float) -> Float
  max2 (x, y) | x >= y = x
              | otherwise = y
  :}
  max2 (2, 4)
#+END_SRC

*RESULTS:*
: 4.0


normaVectorial (x, y)
#+BEGIN_SRC haskell :results output
  :{
  normaVectorial:: (Float, Float) -> Float
  normaVectorial (x, y) = sqrt (x^2 + y^2)
  :}
  normaVectorial (2, 2)
#+END_SRC

*RESULTS:*
: 2.828427

subtract
#+BEGIN_SRC haskell :results output
:{
subtract:: Float -> Float -> Float
subtract = flip (-)
:}
subtract 8 2
#+END_SRC

*RESULTS:*
: -6.0

predecesor
#+BEGIN_SRC haskell :results output
  :{
    subtract:: Float -> Float -> Float
     subtract = flip (-)

     predecesor:: Float -> Float
     predecesor = subtract 1

  :}
  predecesor 8
#+END_SRC

*RESULTS:*
: 7.0



evaluarEnCero

#+BEGIN_SRC haskell :results output
  :{
    subtract:: Float -> Float -> Float
    subtract = flip (-)

    predecesor:: Float -> Float
    predecesor = subtract 1

    evaluarEnCero:: (Float -> Float) -> Float
    evaluarEnCero = \f -> f 0

  :}
  evaluarEnCero(predecesor)
#+END_SRC

*RESULTS:*
: -1.0

dosVeces
#+BEGIN_SRC haskell :results output
  :{
    dosVeces:: (Float -> Float) -> (Float -> Float)
    dosVeces = \f -> f . f

    sumarDos:: Float -> Float
    sumarDos x = x + 2
  :}

   dosVeces sumarDos 5
#+END_SRC

*RESULTS:*
: 9.0

flipAll = map flip
#+BEGIN_SRC haskell :results output
  :{
     flipAll:: [a -> b -> c] -> [b -> a -> c]
     flipAll = map flip

  :}
#+END_SRC

*RESULTS:*




flipRaro = flip flip
#+BEGIN_SRC haskell :results output
  :{
    flipRaro:: e -> (d -> e -> f) -> d -> f
    flipRaro = flip flip

  :}
#+END_SRC

*RESULTS:*

ii. Indicar cuáles de las funciones anteriores no están curricadas. Para cada una de ellas, denir la función
curricada correspondiente. Recordar dar el tipo de la función.
** Ejercicio 2
*** i.
Definir la función curry, que dada una función de dos argumentos,
devuelve su equivalente currificada.

#+BEGIN_SRC haskell :results output
  :{
  curry :: ((a,b) -> c) -> a -> b -> c
  curry f x y = f (x,y)

  -- curry f = \x -> \y -> f (x,y)
  -- curry f = \x y -> f (x,y)
  :}

#+END_SRC

*** ii.
Defnir la función uncurry, que dada una función currificada de dos
argumentos, devuelve su versión no currificada equivalente. Es la
inversa de la anterior
#+begin_src haskell :results output
  {:
  uncurry :: (a -> b -> c) -> (a,b) -> c
  uncurry f = \(x,y) -> f x y
  }:
#+end_src

iii. Se podría definir una función curry^n, que tome una función de un número arbitrario de argumentos y
devuelva su versión currificada?
*Sugerencia*: pensar cuál sería el tipo de la función
** Ejercicio 3
*** i. Redefinir usando *foldr* las funciones *sum*, *elem*, *(++)*, *filter* y *map*.
**** sum
#+begin_src haskell :results output
    :{
    sum:: Num b => [b] -> b
    sum [] = 0
    sum (b:bs) = b + sum bs
    :}

    :{
    sumF::Num b => [b] -> b
    sumF = foldr (\x resRec -> x + resRec )  0
    :}
  sumF [1, 2, 3]

#+end_src

*RESULTS:*
: 6
**** Elem
#+begin_src haskell :results output
:{
elem:: Eq a => a -> [a] -> Bool
elem _ [] = Falsey
elem a (x:xs) = (x == a) || (elem a xs)
:}


:{
elemF:: Eq a => a -> [a] -> Bool
elemF a = foldr (\x resRec -> ((x == a) || resRec)) (False)
:}

elem 0 [1, 0]
elemF 7 [8, 9, 7]
elemF 7 [8, 9]

elem 0 [8, 9]
#+end_sr

*RESULTS:*
: True
: True
: False
**** (++)
#+begin_src haskell :results output code
  :{
  (++):: [a] -> [a] -> [a]
  (++) [] a = a
  (++) (x:xs) a = x : ((++) xs a)
  :}

  :{
  (+++):: [a] -> [a] -> [a]
  (+++) xs ys = foldr (\x resRec -> x : resRec) ys xs
  :}

  ((+++) [5, 4] [6, 7])

#+end_src

*RESULTS:*
#+begin_src haskell
[5,4,6,7]
#+end_src
**** filter

#+begin_src haskell :results output code

    :{
      filter:: ( a -> Bool) -> [a] -> [a]
      filter _ [] = []
      filter pred (x:xs) = if (pred x) then x : (filter pred xs) else (filter pred xs)
  :}
  :{
      filter:: ( a -> Bool) -> [a] -> [a]
      filter pred xs = foldr(\x resRec -> if (pred x) then (x:resRec) else resRec) [] xs
  :}
    filter (even) [1, 2, 3, 4, 5]

#+end_src

*RESULTS:*
#+begin_src haskell
[2,4]
#+end_src
**** Map
#+begin_src haskell :results output
  :{
     map::
  :}

#+end_src

*RESULTS:*
: map :: (a -> b) -> [a] -> [b]

*** ii
ii. Definir la función mejorSegún :: (a -> a -> Bool) -> [a] -> a, que
devuelve  el máximo elemento de la lista según una función de
comparación, utilizando foldr1. Por ejemplo, maximum = mejorSegún (>).
**** MejorSegun
#+begin_src haskell :results output code
     :{
      mejorSegun :: (a -> a -> Bool) -> [a] -> a
      mejorSegun _ [x] = x
      mejorSegun pred (x:xs) = if (pred x (mejorSegun pred xs)) then x else mejorSegun pred xs
     :}

      :{
      mejorSegun2 :: (a -> a -> Bool) -> [a] -> a
      mejorSegun2 pred = foldr1 mejor
       where
        mejor x res
          | pred x res = x
          | otherwise = res
      :}

  :{
    mejorSegun3 :: (a -> a -> Bool) -> [a] -> a
    mejorSegun3 pred = foldr1 (\x res -> case pred x res of
                                        True  -> x
                                        False -> res)

  :}
   (mejorSegun2 (>) [1, 5, 10, 8, 4])
   (mejorSegun3 (>) [1, 88, 10, 8, 4])

#+end_src

*RESULTS:*
#+begin_src haskell
10
88
#+end_src

*** TODO iii
iii. Definir la función sumasParciales :: Num a => [a] -> [a], que dada una lista de números devuelve
otra de la misma longitud, que tiene en cada posición la suma parcial de los elementos de la lista original
desde la cabeza hasta la posición actual. Por ejemplo, sumasParciales
[1,4,-1,0,5] ; [1,5,4,4,9].

#+begin_src haskell :results output code
  :t foldr
  :{
  sumasParciales :: Num a => [a] -> [a]
  sumasParciales [x] = [x]
  sumasParciales xs = sumasParciales' 0 xs
    where
      sumasParciales' _ [] = []
      sumasParciales' acc (y:ys) = [acc + y] ++ sumasParciales' (acc+y) ys

  :}

  :{
    sumasParciales1 :: Num a => [a] -> [a]
    sumasParciales1 xs = sumasParciales1' 0 xs
     where
     sumasParciales1' = foldl (\(acc, xs) y -> (acc + y, xs:(acc+y) )) (0,[])
  :}
  sumasParciales1 [1,4,-1,0,5]

#+end_src

*RESULTS:*
#+begin_src haskell
foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
<interactive>:16:24-44: error:
    • Couldn't match expected type: [a] -> [a]
                  with actual type: ([a0], [a0])
    • The function ‘sumasParciales1'’
      is applied to two value arguments,
        but its type ‘t0 [a0] -> ([a0], [a0])’ has only one
      In the expression: sumasParciales1' 0 xs
      In an equation for ‘sumasParciales1’:
          sumasParciales1 xs
            = sumasParciales1' 0 xs
            where
                sumasParciales1'
                  = foldl (\ (acc, xs) y -> (acc + y, xs : (acc + y))) (0, [])
    • Relevant bindings include
        xs :: [a] (bound at <interactive>:16:19)
        sumasParciales1 :: [a] -> [a] (bound at <interactive>:16:3)

<interactive>:18:56-57: error:
    • Couldn't match expected type ‘a1’ with actual type ‘[a1]’
      ‘a1’ is a rigid type variable bound by
        the inferred type of sumasParciales1' :: t [a1] -> ([a1], [a1])
        at <interactive>:18:4-75
    • In the first argument of ‘(:)’, namely ‘xs’
      In the expression: xs : (acc + y)
      In the expression: (acc + y, xs : (acc + y))
    • Relevant bindings include
        y :: [a1] (bound at <interactive>:18:41)
        xs :: [a1] (bound at <interactive>:18:37)
        acc :: [a1] (bound at <interactive>:18:32)
        sumasParciales1' :: t [a1] -> ([a1], [a1])
          (bound at <interactive>:18:4)
<interactive>:20:1-15: error:
    • Variable not in scope: sumasParciales1 :: [a0] -> t
    • Perhaps you meant ‘sumasParciales’ (line 6)
#+end_src

*** iv
iv. Definir la función sumaAlt, que realiza la suma alternada de los elementos de una lista. Es decir, da como
resultado: el primer elemento, menos el segundo, más el tercero, menos el cuarto, etc. Usar foldr.
*** v
v. Hacer lo mismo que en el punto anterior, pero en sentido inverso
(el último elemento menos el anteúltimo, etc.). Pensar qué esquema de
recursión conviene usar en este caso.

** Ejercicio 4
*** i.
Definir la función permutaciones :: [a] -> [[a]], que dada una lista
devuelve todas sus permutacines. Se recomienda utilizar concatMap ::
(a -> [b]) -> [a] -> [b], y también take y drop.
#+begin_src haskell :results output code
  :{
  listaDeIndices :: Int -> [Int]
  listaDeIndices 0 = [0]
  listaDeIndices i =  listaDeIndices (i-1) ++ [i]
  :}


  :{
  permutaciones :: [a] -> [[a]]
  permutaciones [] = [[]]
  permutaciones xs =
    concatMap (\n ->
                   let elemento = xs !! n
                       resto    = take n xs ++ drop (n + 1) xs
                   in map (elemento :) (permutaciones resto)
                ) [0 .. length xs - 1]

  :}
permutaciones [8, 10, 99]
#+end_src

*RESULTS:*
#+begin_src haskell
[[8,10,99],[8,99,10],[10,8,99],[10,99,8],[99,8,10],[99,10,8]]
#+end_src
*** ii
i. Definir la función partes, que recibe una lista L y devuelve la
lista de todas las listas formadas por los mismos elementos de L, en
su mismo orden de aparición.

#+begin_src haskell :results output code
  :{
   partes :: [a] -> [[a]]
   partes [] = [[]]
   partes xs = (map (head xs:)  (partes (tail xs))) ++ (partes (tail xs))
  :}

   partes [5,2,1]

#+end_src


*RESULTS:*
#+begin_src haskell
[[5,2,1],[5,2],[5,1],[5],[2,1],[2],[1],[]]
#+end_src
*** iii
Definir la función prefijos, que dada una lista, devuelve todos sus
prfijos.
#+begin_src haskell :results output code
  :{
   prefijos :: [a] -> [[a]]
   prefijos [a] = [[a]]
   prefijos xs = map (\n ->
                   take n xs
                ) [0 .. length xs]
  :}
prefijos [1, 2, 3,4]
#+end_src

*RESULTS:*
#+begin_src haskell
[[],[1],[1,2],[1,2,3],[1,2,3,4]]
#+end_src

*** iv
 Definir la función sublistas que, dada una lista, devuelve todas sus
 sublistas (listas de elementos que aparecen consecutivos en la lista
 original).

 #+begin_src haskell :results output
:{
prefijos :: [a] -> [[a]]
prefijos [a] = [[a]]
prefijos xs = map (\n -> take n xs) [1 .. length xs]

sublistas :: [a] -> [[a]]
sublistas [] = [[]]
sublistas xs = (prefijos xs) ++ sublistas (tail xs)
:}
sublistas [1, 2, 3, 4]


#+end_src

*RESULTS:*
: [[1],[1,2],[1,2,3],[1,2,3,4],[2],[2,3],[2,3,4],[3],[3,4],[4],[]]



** TODO Ejercicio 5
siderar las siguientes funciones:
#+begin_src haskell :results output
:{
  elementosEnPosicionesPares :: [a] -> [a]
  elementosEnPosicionesPares [] = []
  elementosEnPosicionesPares (x:xs) = if null xs
                                      then [x]
                                      else x : elementosEnPosicionesPares (tail xs)
:}

#+end_src

#+begin_src haskell :results output
  :{
  entrelazar :: [a] -> [a] -> [a]
  entrelazar [] = id
  entrelazar (x:xs) = \ys -> if null ys
                             then x : entrelazar xs []
                             else x : head ys : entrelazar xs (tail ys)
  :}

#+end_src



Indicar si la recursión utilizada en cada una de ellas es o no
estructural. Si lo es, reescribirla utilizando foldr. En caso
contrario, explicar el motivo.

#+begin_src haskell :results output
:{
  elementosEnPosicionesPares :: [a] -> [a]
  elementosEnPosicionesPares [] = []
  elementosEnPosicionesPares (x:xs) = if null xs
                                      then [x]
                                      else x : elementosEnPosicionesPares (tail xs)
:}

#+end_src

Para ver si hay induccion en la estructura de xs, basta ver:
1. Caso base, P([]).
2. Caso inductivo, ∀x :: a. ∀xs :: [a]. (P(xs) ⇒ P(x : xs)).



** Ejercicio 6
*** a
Definir la función sacarUna :: Eq a => a -> [a] -> [a], que dados un
elemento y una lista devuelve el resultado de eliminar de la lista la
primera aparición del elemento(si está presente).
#+begin_src haskell :results output code
    :{
    sacarUna:: Eq a => a -> [a] -> [a]
    sacarUna a [] = []
    sacarUna a (x:xs) = if (a == x) then xs else x:(sacarUna a xs)
    :}

    :{
   recr :: (a -> [a] -> b -> b) -> b -> [a] -> b
   recr f z [] = z
   recr f z (x : xs) = f x xs (recr f z xs)

    sacarUnaR:: Eq a => a -> [a] -> [a]
    sacarUnaR a = recr (\x xs resc ->  if (a == x) then xs else x:resc) []
    :}
  sum 0 [1, 2, 3]

#+end_src
*** b
Explicar por qué el esquema de recursión estructural (foldr) no es
adecuado para implementar la función sacarUna del punto anterior
*** c
Definr la función insertarOrdenado :: Ord a => a -> [a] -> [a] que
inserta un elemento en una lista ordenada (de manera creciente), de
manera que se preserva el ordenamiento.
#+begin_src haskell :results output
  :{
   insertarOrdenado :: Ord a => a -> [a] -> [a]
   insertarOrdenado a [] = [a]
   insertarOrdenado a (x:xs) = if a < x then [a] ++ [x] ++ xs else x:insertarOrdenado a xs
  :}

  :{
   recr :: (a -> [a] -> b -> b) -> b -> [a] -> b
   recr f z [] = z
   recr f z (x : xs) = f x xs (recr f z xs)

   insertarOrdenadoR :: Ord a => a -> [a] -> [a]
   insertarOrdenadoR a = recr (\x xs res -> if (a < x) then a:x:xs else x:res) [a]
  :}
    insertarOrdenadoR 3 [1,2,4,5]
    insertarOrdenadoR 6 [1,2,4,5]
#+end_src

*RESULTS:*
: [1,2,3,4,5]
: [1,2,4,5,6]
** Ejercicio 7
Definir las siguientes funciones para trabajar sobre listas, y dar su
tipo. Todas ellas deben poder aplicarse a listas finitas e infinitas.
*** i
mapPares, una versión de map que toma una función currificada de dos
argumentos y una lista de pares de valores, y devuelve la lista de
aplicaciones de la función a cada par. Pista: recordar curry y
uncurry.

#+BEGIN_SRC haskell :results output
  :{
  curry :: ((a,b) -> c) -> a -> b -> c
  curry f x y = f (x,y)
  :}

#+END_SRC

*RESULTS:*
: my-org-block-hindent-indent

#+begin_src haskell :results output
  {:
  uncurry :: (a -> b -> c) -> (a,b) -> c
  uncurry f = \(x,y) -> f x y
  }:
#+end_src

#+begin_src haskell :results output code
  :{
    uncurry :: (a -> b -> c) -> (a,b) -> c
    uncurry f = \(x,y) -> f x y

    mapPares :: (a -> b -> c) -> [(a, b)] -> [c]
    mapPares f xs = map (uncurry f) xs
  :}

 mapPares (+) [(1,2), (8,9)]
#+end_src

*RESULTS:*
#+begin_src haskell
[3,17]
#+end_src


*** ii
armarPares, que dadas dos listas arma una lista de pares que contiene,
en cada posición, el elemento correspondiente a esa posición en cada
una de las listas. Si una de las listas es más larga que la otra,
ignorar los elementos que sobran (el resultado tendrá la longitud de
la lista más corta). Esta función en Haskell se llama zip. Pista:
aprovechar la currificación y utilizar evaluación parcial.

#+begin_src haskell :results output
  :{
    armarPares :: [a] -> [b] -> [(a,b)]
    armarPares _ [] = []
    armarPares [] _ = []
    armarPares xs ys = [(head xs, head ys)] ++ (armarPares (tail xs) (tail ys))
  :}
armarPares [2,3,4,6,7] [6,7,7,8,9,04,34,6,7]
#+end_src

*RESULTS:*
: [(2,6),(3,7),(4,7),(6,8),(7,9)]


*** iii.
mapDoble, una variante de mapPares, que toma una función currificada
de dos argumentos y dos listas (de igual longitud), y devuelve una
lista de aplicaciones de la función a cada elemento correspondiente de
las dos listas. Esta función en Haskell se llama zipWith.
#+begin_src haskell :results output
  :{
   mapDoble :: (a -> b -> c) -> [a] -> [b] -> [c]
   mapDoble _ [] _ = []
   mapDoble _ _ [] = []
   mapDoble f xs ys = f (head xs) (head ys) : mapDoble f (tail xs) (tail ys)
  :}
mapDoble (+) [1,2,3] [1,2,3,4]
#+end_src

*RESULTS:*
: [2,4,6]


** Ejercicio 8
*** i.
Escribir la función sumaMat, que representa la suma de matrices,
usando ~zipWith~. Representaremos una matriz como la lista de sus
filas. Esto quiere decir que cada matriz será una lista finita de
listas fiitas, todas de la misma longitud, con elementos
enteros. Recordamos que la suma de matrices se define como la suma
celda a celda. Asumir que las dos matrices a sumar están bien formadas
y tienen las mismas dimensiones.

~sumaMat :: [[Int]] -> [[Int]] -> [[Int]]~
#+begin_src haskell :results output code
  :{
   sumaMat :: [[Int]] -> [[Int]] -> [[Int]]
   sumaMat _ [] = []
   sumaMat [] _ = []
   sumaMat a b = zipWith (+) (head a) (head b) : sumaMat (tail a) (tail b)
  :}

   sumaMat [[1,2],[2,4]] [[9, 8],[8, 6]]
#+end_src

*RESULTS:*
#+begin_src haskell
[[10,10],[10,10]]
#+end_src



*** ii.
Escribir la función trasponer, que, dada una matriz como las del ítem
i, devuelva su traspuesta. Es decir, en la posición i, j del resultado
está el contenido de la posición j, i de la matriz original. Notar que
si la entrada es una lista de N listas, todas de longitud M , la
salida debe tener M listas, todas de longitud N.

~trasponer :: [[Int]] -> [[Int]]~

#+begin_src haskell :results output
:{
transpuesta :: [[a]] -> [[a]]
transpuesta [] = []
transpuesta ([]:_) = []
transpuesta xs = map head xs : transpuesta (map tail xs)

:}
transpuesta [[1,2,3,4], [5,6,7,8]]
#+end_src

*RESULTS:*
: [[1,5],[2,6],[3,7],[4,8]]

*evaluacion de funciones para entender la implementacion:*
#+begin_src haskell :results output
   map tail [[1,2,3, 4], [5,6,7, 8]]
   map head [[1,2,3, 4], [5,6,7, 8]]
#+end_src

*RESULTS:*
: [[2,3,4],[6,7,8]]
: [1,5]

** Ejercicio 9

*** I
Definir y dar el tipo del esquema de recursión foldNat sobre los
naturales. Utilizar el tipo Integer de Haskell (la función va a estar
definida sólo para los enteros mayores o iguales que 0)

#+begin_src haskell :results output code
  :{
    foldNat :: (Num a, Eq a) => (a -> b -> b) -> b -> a -> b
    foldNat _ cb 0 = cb
    foldNat f cb x = f x (foldNat f cb (x - 1))
  :}

#+end_src

*RESULTS:*
#+begin_src haskell
#+end_src


*** II
Utilizando foldNat, denir la función potencia.
#+begin_src haskell :results output
    :{
       foldNat :: (Num a, Eq a) => (a -> b -> b) -> b -> a -> b
       foldNat _ cb 0 = cb
       foldNat f cb x = f x (foldNat f cb (x - 1))

       potencia :: (Num a, Eq a) => a -> a -> a
       potencia a b = foldNat (\_ acc -> acc * a) 1 b

    :}
  potencia 4 2
#+end_src

*RESULTS:*
: 16

** Ejercicio 10

*** I
Definir la función ~genLista :: a -> (a -> a) -> Integer -> [a]~, que
genera una lista de una cantidad dada de elementos, a partir de un
elemento inicial y de una función de incremento entre los elementos de
la lista. Dicha función de incremento, dado un elemento de la lista,
devuelve el elemento siguiente.

#+begin_src haskell :results output code
:{

foldNat :: (Num a, Eq a) => (a -> b -> b) -> b -> a -> b
foldNat _ cb 0 = cb
foldNat f cb x = f x (foldNat f cb (x - 1))

genLista :: a -> (a -> a) -> Integer -> [a]
genLista x f 1 = [x]
genLista x f i = (x):(genLista (f x) f (i-1))

genListaR :: a -> (a -> a) -> Integer -> [a]
genListaR x f i = foldNat (\_ acc -> (acc ++ [f (last acc)])) [x] (i-1)



:}
genLista 1 (\x -> x+1) 5
genListaR 1 (\x -> x+1) 5

#+end_src

*RESULTS:*
#+begin_src
[1,2,3,4,5]
[1,2,3,4,5]
#+end_src


*** II
Usando genLista, definir la función desdeHasta, que dado un par de
números (el primero menor que el segundo), devuelve una lista de
números consecutivos desde el primero hasta el segundo

#+begin_src haskell :results output
  :{
  foldNat :: (Num a, Eq a) => (a -> b -> b) -> b -> a -> b
  foldNat _ cb 0 = cb
  foldNat f cb x = f x (foldNat f cb (x - 1))

  genListaR :: a -> (a -> a) -> Integer -> [a]
  genListaR x f i = foldNat (\_ acc -> (acc ++ [f (last acc)])) [x] (i-1)

  desdeHasta :: Int -> Int -> [Int]
  desdeHasta a b
    | a == b    = [a]
    | otherwise = desdeHasta a (b-1) ++ [b]

  desdeHastaR :: Integer -> Integer -> [Integer]
  desdeHastaR a b = genListaR a (\x -> x+1) b
  :}
  desdeHasta 1 10
  desdeHastaR 1 10

#+end_src

*RESULTS:*
: [1,2,3,4,5,6,7,8,9,10]
: [1,2,3,4,5,6,7,8,9,10]
